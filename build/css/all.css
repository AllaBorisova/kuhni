/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
html {
  line-height: 1.15; /* 1 */
  -webkit-text-size-adjust: 100%; /* 2 */
}

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
  margin: 0;
}

/**
 * Render the `main` element consistently in IE.
 */
main {
  display: block;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  -webkit-box-sizing: content-box;
  box-sizing: content-box; /* 1 */
  height: 0; /* 1 */
  overflow: visible; /* 2 */
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/* Text-level semantics
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none; /* 1 */
  text-decoration: underline; /* 2 */
  -webkit-text-decoration: underline dotted;
  text-decoration: underline dotted; /* 2 */
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
  border-style: none;
}

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit; /* 1 */
  font-size: 100%; /* 1 */
  line-height: 1.15; /* 1 */
  margin: 0; /* 2 */
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button,
[type=button],
[type=reset],
[type=submit] {
  -webkit-appearance: button;
}

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type=button]::-moz-focus-inner,
[type=reset]::-moz-focus-inner,
[type=submit]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type=button]:-moz-focusring,
[type=reset]:-moz-focusring,
[type=submit]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  -webkit-box-sizing: border-box;
  box-sizing: border-box; /* 1 */
  color: inherit; /* 2 */
  display: table; /* 1 */
  max-width: 100%; /* 1 */
  padding: 0; /* 3 */
  white-space: normal; /* 1 */
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline;
}

/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type=checkbox],
[type=radio] {
  -webkit-box-sizing: border-box;
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type=number]::-webkit-inner-spin-button,
[type=number]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type=search] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item;
}

/* Misc
   ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
  display: none;
}

/**
 * Add the correct display in IE 10.
 */
[hidden] {
  display: none;
}

@font-face {
  font-family: "TT Hoves Pro Medium";
  src: url("../fonts/TTHovesPro/eot/TT_Hoves_Pro_Medium.eot");
  src: url("../fonts/TTHovesPro/eot/TT_Hoves_Pro_Medium.eot?#iefix") format("embedded-opentype"), url("../fonts/TTHovesPro/woff/TT_Hoves_Pro_Medium.woff") format("woff"), url("../fonts/TTHovesPro/ttf/TT_Hoves_Pro_Medium.ttf") format("truetype");
  font-weight: normal;
  font-style: normal;
}
*,
*::after,
*::before {
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

html {
  font-size: 10px;
  scroll-behavior: smooth;
}

blockquote,
body,
dd,
dl,
figcaption,
figure,
h1,
h2,
h3,
h4,
li,
ol,
p,
ul {
  margin: 0;
}

body {
  overflow-x: hidden;
  height: 100%;
  font-family: "TT Hoves Pro Medium", sans-serif;
  font-weight: 400;
  color: #090909;
  font-size: 14px;
  line-height: 1.2;
  min-height: 100vh;
}

a {
  font-family: inherit;
  text-decoration: none;
  color: inherit;
}

img {
  max-width: 100%;
  height: auto;
}

button {
  cursor: pointer;
  border: none;
}

button,
input,
select,
textarea {
  font-family: inherit;
}

textarea {
  resize: none;
}

:active,
:focus {
  outline: none !important;
}

::-moz-focus-inner {
  border: 0 !important;
}

.container {
  max-width: 1440px;
  padding: 0 30px;
  margin: 0 auto;
}

.stub {
  background: #d1eeff;
  min-height: 100vh;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  position: relative;
}
@media (max-width: 767px) {
  .stub {
    padding-top: 20px;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: column;
  }
}
.stub__logo {
  position: absolute;
  max-width: 150px;
  margin-left: -75px;
  top: 32px;
  left: 50%;
}
.stub__logo svg {
  max-width: 100%;
  height: auto;
}
@media (max-width: 767px) {
  .stub__logo {
    position: static;
    margin: 0 0 44px 0;
    max-width: 100px;
  }
}
.stub__inner {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  gap: 21px;
  background-image: url("data:image/svg+xml,%3Csvg width='600' height='502' viewBox='0 0 600 502' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cg clip-path='url(%23clip0_328_16)'%3E%3Cpath opacity='0.2' d='M60.4077 418.507C60.4077 418.507 123.518 498.636 231.367 501.892C339.216 505.149 435.65 437.756 515.231 385.203C594.796 332.664 620.904 244.778 581.191 172.285C541.477 99.7917 469.373 124.601 382.775 73.6301C296.162 22.6743 280.81 -4.07094 180.437 0.506938C80.05 5.08482 -3.0393 112.604 0.622572 233.073C4.28445 353.541 60.4077 418.492 60.4077 418.492V418.507Z' fill='white' /%3E%3C/g%3E%3Cdefs%3E%3CclipPath id='clip0_328_16'%3E%3Crect width='599' height='502' fill='white' transform='translate(0.5)' /%3E%3C/clipPath%3E%3C/defs%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: center;
  margin: 0 auto;
  padding-top: 82px;
  min-height: 540px;
}
@media (max-width: 767px) {
  .stub__inner {
    min-height: auto;
    padding-top: 0;
    -webkit-box-orient: vertical;
    -webkit-box-direction: reverse;
    -ms-flex-direction: column-reverse;
    flex-direction: column-reverse;
    gap: 33px;
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    justify-content: center;
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
    background-size: 456px;
    width: 100%;
  }
}
.stub__img {
  max-width: 382px;
}
.stub__desc {
  padding-top: 30px;
}
@media (max-width: 767px) {
  .stub__desc {
    padding-top: 0;
  }
}
.stub__text {
  font-weight: 500;
  font-size: 22px;
  line-height: 118%;
  letter-spacing: 0.01em;
  margin-bottom: 13px;
  text-align: center;
}
@media (max-width: 767px) {
  .stub__text {
    font-size: 16px;
    line-height: 125%;
    letter-spacing: 0.02em;
    margin-bottom: 8px;
  }
}
.stub__accent {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  font-weight: 500;
  font-size: 42px;
  line-height: 124%;
  letter-spacing: 0.01em;
  background: #f1b195;
  border-radius: 8px;
  height: 60px;
  padding: 0 12.5px;
}
@media (max-width: 767px) {
  .stub__accent {
    height: 52px;
    font-size: 32px;
    line-height: 100%;
  }
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
